GARLI Version 0.96 COMPILATION/INSTALLATION INSTRUCTIONS:

NOTE: For Windows and Mac OS X machines you should not need to 
compile the program manually, and it is recommended that you 
download one of the pre-compiled binaries.

(If after reviewing this document you still have unsolved compilation
problems, please email garli.support@gmail.com)
------

To make and install GARLI, you first need to have a compiled
copy of the Nexus Class Library by Paul Lewis and Mark Holder.
The NCL source can be obtained via the Sourceforge project page:
http://sourceforge.net/projects/ncl/
or can be obtained by anonymous svn:
svn co http://ncl.svn.sourceforge.net/svnroot/ncl/trunk/

NOTE: As of mid-May 2008, the current released NCL version is 2.0.02.
NCL version 2.1 is soon to be released as a Sourceforge distribution 
package and should be preferred over the older version.  In the meantime,
the new version can be obtained via svn:
svn co http://ncl.svn.sourceforge.net/svnroot/ncl/branches/v2.1/
------

You can choose to compile GARLI with the NCL library either statically
or dynamically linked in.  Note that whether GARLI will link 
it statically or dynamically depends on how NCL itself is 
configured when it is built.
-To dynamically link:
You only really want to do this if you are an admin on the machine
and are going to install NCL globally (e.g. in /usr/local/),
or if you want to install it elsewhere and are the only one that will 
be using it on that machine.  In those cases, configure and build NCL
using the defaults (you can omit the prefix if you want to
just install globally into the normal location at /usr/local/):
(from the NCL source root directory)
./configure --prefix=<install directory>
make 
make install

-To statically link:
Do this if you want the GARLI executable to run on another machine of the
same type, or for another user on the same machine.  It will not require
the NCL library to remain on the system after compilation of GARLI.
Configure and build NCL like this (the shared NCL library will not
be made):
(from the NCL source root directory)
./configure --prefix=<install directory> --disable-shared
make
make install

Then configure and build GARLI (if you installed NCL globally at /usr/local,
you can leave off the --with-ncl= argument):
(from GARLI's source root directory)
./configure --prefix=<install directory> --with-ncl=<ncl install directory>
make
make install

To run the program once you've compiled the executable, you'll need to use
a configuration file.  Sample files and test datasets are provided in the 
example directory.
------

Other configuration notes:
To use a compiler different from the default (for example the Intel icc
compiler), call configure like this:

env CC=icc CXX=icpc ./configure ... etc

You can similarly pass extra CXXFLAGS or LDFLAGS:

env CXXFLAGS=<your flags> LDFLAGS=<your flags> ./configure ... etc
------

Making an OS X Universal binary:
To do this you first need to build the NCL static library with multiple architectures.
Configure NCL like this (all on one line):

env CXXFLAGS="-arch ppc -arch i386" LDFLAGS="-arch ppc -arch i386" \
	./configure --prefix=<install directory> --disable-dependency-tracking --disable-shared

Then configure GARLI like this (all on one line):

env CXXFLAGS="-arch ppc -arch i386" LDFLAGS="-arch ppc -arch i386" \
	./configure --prefix=<install directory> --disable-dependency-tracking \
	--with-ncl=<ncl install directory>
---

Other options that can be passed to configure:
--enable-openmp
(build the multithreaded openMP version - only available with Intel compiler,
so be sure to set CC=icc and CXX=icpc)

--enable-mpi
(build the MPI run distributing version.  It should automatically determine
the correct MPI compiler script name (e.g. mpiCC) but if the underlying compiler
is not gcc (try "mpiCC --version" to check) you should also set CC and CXX to the
corresponding compiler type to get the right compilation flags) 

--help
(list other options of the configure script)